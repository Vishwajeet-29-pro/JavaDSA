Overview:
The Decorator Pattern is a structural design pattern that allows behavior to be added to individual objects, dynamically,
without affecting the behavior of other objects from the same class. This is done by creating a set of decorator classes
that are used to wrap concrete components. Decorators provide a flexible alternative to subclassing for extending functionality.

Intent:

Attach additional responsibilities to an object dynamically.
Decorators provide a flexible alternative to subclassing for extending functionality.
Key Concepts:

Component: The interface for objects that can have responsibilities added to them dynamically.
Concrete Component: The class that implements the Component interface. This is the object to which additional
responsibilities can be attached.
Decorator: Abstract class that implements the Component interface and contains a reference to a Component object.
    It forwards requests to the component and may perform additional actions before or after forwarding the request.
Concrete Decorators: Classes that extend the Decorator class to add responsibilities to the component.