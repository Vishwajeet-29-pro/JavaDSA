very easy level of problems -> design concepts, code practices, clean code.
    java has some trending things in market -> solid principals, k-iss, achonomanian guidelines,
                                                tdd, real world problems with solid principals, modular level
                                            topic wise: java 8 + lambda, functional style... stream map filter
                                                generics, wrapper classes, Optional, all oops
                                            JVM level: how jvm works, how we can optimize it, how garbage collector works,
                                                writing code at such level so that performance is at peak level.
                                            frameworks:
                                                1. spring /spring boot -> configurations, annotations, how to define bean,
                                                        spring data jpa, diff scope of bean, diff config, profiling in
                                                        spring boot. Spring cloud related.
                                                        reactive style of programming in java (webflux for spring.)
                                            Database level: Other than basic and advance query writing, how to optimize it
                                                            simplifies schema, indexing, partitioning
                                            Problem solving side: very basics of problems.
                                                what are diff cloud services, what is aws provides, what is jenkins, what is
                                                docker, what is kubernetes (basic level of configs)
                                            unit test cases, annotations, mocking, stubs.